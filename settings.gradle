pluginManagement {
    resolutionStrategy {
        eachPlugin {
            // mixingradle and forgegradle don't have the right Plugin Marker Artifacts, so we need to specify resolution rules
            if (requested.id.toString() == 'org.spongepowered.mixin') {
                useModule('org.spongepowered:mixingradle:' + requested.version)
            }
            if (requested.id.toString() == 'net.minecraftforge.gradle.forge') {
                useModule('net.minecraftforge.gradle:ForgeGradle:' + requested.version)
            }
        }
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            setUrl("http://files.minecraftforge.net/maven")
        }
        maven {
            setUrl("http://repo.spongepowered.org/maven")
        }
        maven {
            setUrl("https://plugins.gradle.org/m2/")
        }
    }
}
enableFeaturePreview('STABLE_PUBLISHING')
rootProject.name = "CubicWorldGen"

// include CC as subproject if it exists
if (file("../1.12").exists()) {
    println("Including build at ../1.12/ in composite build")
    includeBuild("../1.12") {
        dependencySubstitution {
            substitute module('io.github.opencubicchunks:cubicchunks') with project(':')
        }
    }
    includeBuild("../1.12/CubicChunksAPI") {
        dependencySubstitution {
            substitute module('io.github.opencubicchunks:cubicchunks-api') with project(':')
        }
    }
} else if (file("../CubicChunks").exists()) {
    println("Including build at ../CubicChunks/ in composite build")
    includeBuild("../CubicChunks") {
        dependencySubstitution {
            substitute module('io.github.opencubicchunks:cubicchunks') with project(':')
        }
    }
    includeBuild("../CubicChunks/CubicChunksAPI") {
        dependencySubstitution {
            substitute module('io.github.opencubicchunks:cubicchunks-api') with project(':')
        }
    }
}